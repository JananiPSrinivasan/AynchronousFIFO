
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.55+36 (git sha1 9ab194679, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)

-- Executing script file `../model/design.ys' --

1. Executing Verilog-2005 frontend: fifo_pkg.sv
Parsing formal SystemVerilog input from `fifo_pkg.sv' to AST representation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: sync_gray.sv
Parsing formal SystemVerilog input from `sync_gray.sv' to AST representation.
Storing AST representation for module `$abstract\sync_gray'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: fifo_mem.sv
Parsing formal SystemVerilog input from `fifo_mem.sv' to AST representation.
Storing AST representation for module `$abstract\fifo_mem'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: fifo_write_ctrl.sv
Parsing formal SystemVerilog input from `fifo_write_ctrl.sv' to AST representation.
Storing AST representation for module `$abstract\fifo_write_ctrl'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: fifo_read_ctrl.sv
Parsing formal SystemVerilog input from `fifo_read_ctrl.sv' to AST representation.
Storing AST representation for module `$abstract\fifo_read_ctrl'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: fifo_async.sv
Parsing formal SystemVerilog input from `fifo_async.sv' to AST representation.
Storing AST representation for module `$abstract\fifo_async'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: fifo_formal.sv
Parsing formal SystemVerilog input from `fifo_formal.sv' to AST representation.
Storing AST representation for module `$abstract\fifo_formal'.
Successfully finished Verilog frontend.

8. Executing PREP pass.

8.1. Executing HIERARCHY pass (managing design hierarchy).

8.2. Executing AST frontend in derive mode using pre-parsed AST for module `\fifo_formal'.
Generating RTLIL representation for module `\fifo_formal'.

8.2.1. Analyzing design hierarchy..
Top module:  \fifo_formal
Parameter \DATA_WIDTH = 8
Parameter \ADDR_WIDTH = 3

8.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\fifo_async'.
Parameter \DATA_WIDTH = 8
Parameter \ADDR_WIDTH = 3
Generating RTLIL representation for module `$paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async'.

8.2.3. Analyzing design hierarchy..
Top module:  \fifo_formal
Used module:     $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async
Parameter \WIDTH = 4

8.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\sync_gray'.
Parameter \WIDTH = 4
Generating RTLIL representation for module `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100'.
Parameter \WIDTH = 4
Found cached RTLIL representation for module `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100'.
Parameter \ADDR_WIDTH = 3
Parameter \DATA_WIDTH = 8

8.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\fifo_mem'.
Parameter \ADDR_WIDTH = 3
Parameter \DATA_WIDTH = 8
Generating RTLIL representation for module `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem'.
Parameter \ADDR_WIDTH = 3

8.2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\fifo_read_ctrl'.
Parameter \ADDR_WIDTH = 3
Generating RTLIL representation for module `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Parameter \ADDR_WIDTH = 3

8.2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\fifo_write_ctrl'.
Parameter \ADDR_WIDTH = 3
Generating RTLIL representation for module `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.

8.2.8. Analyzing design hierarchy..
Top module:  \fifo_formal
Used module:     $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async
Used module:         $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100
Used module:         $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem
Used module:         $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011
Used module:         $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011

8.2.9. Analyzing design hierarchy..
Top module:  \fifo_formal
Used module:     $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async
Used module:         $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100
Used module:         $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem
Used module:         $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011
Used module:         $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011
Removing unused module `$abstract\fifo_formal'.
Removing unused module `$abstract\fifo_async'.
Removing unused module `$abstract\fifo_read_ctrl'.
Removing unused module `$abstract\fifo_write_ctrl'.
Removing unused module `$abstract\fifo_mem'.
Removing unused module `$abstract\sync_gray'.
Removed 6 unused modules.
Module fifo_formal directly or indirectly contains formal properties -> setting "keep" attribute.

8.3. Executing PROC pass (convert processes to netlists).

8.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$fifo_write_ctrl.sv:28$46 in module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Marked 1 switch rules as full_case in process $proc$fifo_read_ctrl.sv:28$38 in module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Marked 1 switch rules as full_case in process $proc$fifo_mem.sv:20$29 in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
Marked 1 switch rules as full_case in process $proc$sync_gray.sv:10$26 in module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
Removed a total of 0 dead cases.

8.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 13 assignments to connections.

8.3.4. Executing PROC_INIT pass (extract init attributes).

8.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_write_ctrl.sv:28$46'.
Found async reset \rst_n in `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_read_ctrl.sv:28$38'.
Found async reset \rst_n in `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.$proc$sync_gray.sv:10$26'.

8.3.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~5 debug messages>

8.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_write_ctrl.sv:28$46'.
     1/1: $0\wr_bin_ptr[3:0]
Creating decoders for process `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_read_ctrl.sv:28$38'.
     1/1: $0\rd_bin_ptr[3:0]
Creating decoders for process `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:26$36'.
Creating decoders for process `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:20$29'.
     1/3: $1$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$35
     2/3: $1$memwr$\mem$fifo_mem.sv:22$28_DATA[7:0]$34
     3/3: $1$memwr$\mem$fifo_mem.sv:22$28_ADDR[2:0]$33
Creating decoders for process `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.$proc$sync_gray.sv:10$26'.
     1/2: $0\q[3:0]
     2/2: $0\stage1[3:0]
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:0$23'.
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:7$22'.
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:7$21'.
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:61$17'.
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:58$13'.
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:52$10'.
     1/1: $assume$fifo_formal.sv:53$11_EN
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:48$7'.
     1/1: $assume$fifo_formal.sv:49$8_EN
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:0$5'.
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:16$3'.
Creating decoders for process `\fifo_formal.$proc$fifo_formal.sv:15$1'.

8.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fifo_formal.\wr_rst_n' from process `\fifo_formal.$proc$fifo_formal.sv:0$23'.
No latch inferred for signal `\fifo_formal.\rd_rst_n' from process `\fifo_formal.$proc$fifo_formal.sv:0$23'.
No latch inferred for signal `\fifo_formal.\rd_rst_n' from process `\fifo_formal.$proc$fifo_formal.sv:7$22'.
No latch inferred for signal `\fifo_formal.\wr_rst_n' from process `\fifo_formal.$proc$fifo_formal.sv:7$21'.
No latch inferred for signal `\fifo_formal.\wr_data' from process `\fifo_formal.$proc$fifo_formal.sv:0$5'.
No latch inferred for signal `\fifo_formal.\rd_clk' from process `\fifo_formal.$proc$fifo_formal.sv:16$3'.
No latch inferred for signal `\fifo_formal.\wr_clk' from process `\fifo_formal.$proc$fifo_formal.sv:15$1'.

8.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.\wr_bin_ptr' using process `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_write_ctrl.sv:28$46'.
  created $adff cell `$procdff$76' with positive edge clock and positive level reset.
Creating register for signal `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.\rd_bin_ptr' using process `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_read_ctrl.sv:28$38'.
  created $adff cell `$procdff$81' with positive edge clock and positive level reset.
Creating register for signal `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.\rd_data' using process `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:26$36'.
  created $dff cell `$procdff$82' with positive edge clock.
Creating register for signal `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$memwr$\mem$fifo_mem.sv:22$28_ADDR' using process `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:20$29'.
  created $dff cell `$procdff$83' with positive edge clock.
Creating register for signal `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$memwr$\mem$fifo_mem.sv:22$28_DATA' using process `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:20$29'.
  created $dff cell `$procdff$84' with positive edge clock.
Creating register for signal `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$memwr$\mem$fifo_mem.sv:22$28_EN' using process `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:20$29'.
  created $dff cell `$procdff$85' with positive edge clock.
Creating register for signal `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.\q' using process `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.$proc$sync_gray.sv:10$26'.
  created $adff cell `$procdff$90' with positive edge clock and positive level reset.
Creating register for signal `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.\stage1' using process `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.$proc$sync_gray.sv:10$26'.
  created $adff cell `$procdff$95' with positive edge clock and positive level reset.

8.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_write_ctrl.sv:28$46'.
Removing empty process `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_write_ctrl.sv:28$46'.
Found and cleaned up 1 empty switch in `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_read_ctrl.sv:28$38'.
Removing empty process `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$proc$fifo_read_ctrl.sv:28$38'.
Removing empty process `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:26$36'.
Found and cleaned up 1 empty switch in `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:20$29'.
Removing empty process `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.$proc$fifo_mem.sv:20$29'.
Removing empty process `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.$proc$sync_gray.sv:10$26'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:0$23'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:7$22'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:7$21'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:61$17'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:58$13'.
Found and cleaned up 1 empty switch in `\fifo_formal.$proc$fifo_formal.sv:52$10'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:52$10'.
Found and cleaned up 1 empty switch in `\fifo_formal.$proc$fifo_formal.sv:48$7'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:48$7'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:0$5'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:16$3'.
Removing empty process `fifo_formal.$proc$fifo_formal.sv:15$1'.
Cleaned up 5 empty switches.

8.3.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
<suppressed ~3 debug messages>
Optimizing module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
<suppressed ~3 debug messages>
Optimizing module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
Optimizing module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
<suppressed ~4 debug messages>
Optimizing module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async.
Optimizing module fifo_formal.
Couldn't topologically sort cells, optimizing module fifo_formal may take a longer time.
<suppressed ~2 debug messages>

8.4. Executing FUTURE pass.

8.5. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
Optimizing module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
Optimizing module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async.
Optimizing module fifo_formal.

8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem..
Finding unused cells or wires in module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async..
Finding unused cells or wires in module \fifo_formal..
Removed 10 unused cells and 52 unused wires.
<suppressed ~15 debug messages>

8.7. Executing CHECK pass (checking for obvious problems).
Checking module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async...
Checking module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem...
Checking module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011...
Checking module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011...
Checking module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100...
Checking module fifo_formal...
Warning: Wire fifo_formal.\rd_en is used but has no driver.
Warning: Wire fifo_formal.\wr_en is used but has no driver.
Warning: Wire fifo_formal.\rd_clk is used but has no driver.
Warning: Wire fifo_formal.\wr_clk is used but has no driver.
Found and reported 4 problems.

8.8. Executing OPT pass (performing simple optimizations).

8.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async.
Optimizing module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
Optimizing module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
Optimizing module fifo_formal.

8.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async'.
Finding identical cells in module `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem'.
Finding identical cells in module `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Finding identical cells in module `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Finding identical cells in module `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\fifo_formal'.
Removed a total of 0 cells.

8.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fifo_formal..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

8.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async.
  Optimizing cells in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
    Consolidated identical input bits for $mux cell $procmux$60:
      Old ports: A=8'00000000, B=8'11111111, Y=$0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32
      New ports: A=1'0, B=1'1, Y=$0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [0]
      New connections: $0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [7:1] = { $0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [0] $0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [0] $0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [0] $0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [0] $0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [0] $0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [0] $0$memwr$\mem$fifo_mem.sv:22$28_EN[7:0]$32 [0] }
  Optimizing cells in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
  Optimizing cells in module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
  Optimizing cells in module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
  Optimizing cells in module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module \fifo_formal.
Performed a total of 1 changes.

8.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async'.
Finding identical cells in module `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem'.
Finding identical cells in module `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Finding identical cells in module `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Finding identical cells in module `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\fifo_formal'.
Removed a total of 0 cells.

8.8.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async..
Finding unused cells or wires in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem..
Finding unused cells or wires in module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \fifo_formal..

8.8.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async.
Optimizing module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
Optimizing module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
Optimizing module fifo_formal.

8.8.8. Rerunning OPT passes. (Maybe there is more to do..)

8.8.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fifo_formal..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

8.8.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async.
  Optimizing cells in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
  Optimizing cells in module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
  Optimizing cells in module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
  Optimizing cells in module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
  Optimizing cells in module \fifo_formal.
Performed a total of 0 changes.

8.8.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async'.
Finding identical cells in module `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem'.
Finding identical cells in module `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Finding identical cells in module `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Finding identical cells in module `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\fifo_formal'.
Removed a total of 0 cells.

8.8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async..
Finding unused cells or wires in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem..
Finding unused cells or wires in module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \fifo_formal..

8.8.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async.
Optimizing module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
Optimizing module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
Optimizing module fifo_formal.

8.8.14. Finished OPT passes. (There is nothing left to do.)

8.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$add$fifo_read_ctrl.sv:33$42 ($add).
Removed top 28 bits (of 32) from port Y of cell $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$add$fifo_read_ctrl.sv:33$42 ($add).
Removed top 1 bits (of 4) from port B of cell $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$xor$fifo_read_ctrl.sv:48$44 ($xor).
Removed top 28 bits (of 32) from wire $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$add$fifo_read_ctrl.sv:33$42_Y.
Removed top 31 bits (of 32) from port B of cell $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$add$fifo_write_ctrl.sv:33$50 ($add).
Removed top 28 bits (of 32) from port Y of cell $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$add$fifo_write_ctrl.sv:33$50 ($add).
Removed top 1 bits (of 4) from port B of cell $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$xor$fifo_write_ctrl.sv:47$52 ($xor).
Removed top 28 bits (of 32) from wire $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.$add$fifo_write_ctrl.sv:33$50_Y.

8.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async..
Finding unused cells or wires in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem..
Finding unused cells or wires in module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \fifo_formal..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

8.11. Executing MEMORY_COLLECT pass (generating $mem cells).

8.12. Executing OPT pass (performing simple optimizations).

8.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async.
Optimizing module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem.
Optimizing module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011.
Optimizing module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100.
Optimizing module fifo_formal.

8.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async'.
Finding identical cells in module `$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem'.
Finding identical cells in module `$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Finding identical cells in module `$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011'.
Finding identical cells in module `$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100'.
Finding identical cells in module `\fifo_formal'.
Removed a total of 0 cells.

8.12.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async..
Finding unused cells or wires in module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem..
Finding unused cells or wires in module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011..
Finding unused cells or wires in module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100..
Finding unused cells or wires in module \fifo_formal..

8.12.4. Finished fast OPT passes.

8.13. Printing statistics.

=== $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async ===

   Number of wires:                 18
   Number of wire bits:             48
   Number of public wires:          16
   Number of public wire bits:      46
   Number of ports:                 10
   Number of port bits:             24
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $and                            1
     $not                            1
     $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem      1
     $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011      1
     $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011      1
     $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100      2

=== $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem ===

   Number of wires:                 11
   Number of wire bits:             52
   Number of public wires:           7
   Number of public wire bits:      25
   Number of ports:                  7
   Number of port bits:             25
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $dff                            1
     $mem_v2                         1
     $mux                            3

=== $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011 ===

   Number of wires:                 12
   Number of wire bits:             29
   Number of public wires:           8
   Number of public wire bits:      19
   Number of ports:                  7
   Number of port bits:             15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $add                            1
     $adff                           1
     $eq                             1
     $logic_and                      1
     $logic_not                      1
     $mux                            1
     $xor                            1

=== $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011 ===

   Number of wires:                 13
   Number of wire bits:             31
   Number of public wires:           8
   Number of public wire bits:      19
   Number of ports:                  7
   Number of port bits:             15
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            1
     $adff                           1
     $eq                             1
     $logic_and                      1
     $logic_not                      1
     $mux                            1
     $not                            1
     $xor                            1

=== $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100 ===

   Number of wires:                  5
   Number of wire bits:             14
   Number of public wires:           5
   Number of public wire bits:      14
   Number of ports:                  4
   Number of port bits:             10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $adff                           2

=== fifo_formal ===

   Number of wires:                 18
   Number of wire bits:             32
   Number of public wires:          10
   Number of public wire bits:      24
   Number of ports:                  0
   Number of port bits:              0
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $anyseq                         1
     $check                          4
     $logic_and                      2
     $logic_not                      4
     $mux                            2
     $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async      1

=== design hierarchy ===

   fifo_formal                       1
     $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async      1
       $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem      1
       $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011      1
       $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011      1
       $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100      2

   Number of wires:                 82
   Number of wire bits:            220
   Number of public wires:          59
   Number of public wire bits:     161
   Number of ports:                 39
   Number of port bits:             99
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 39
     $add                            2
     $adff                           6
     $and                            1
     $anyseq                         1
     $check                          4
     $dff                            1
     $eq                             2
     $logic_and                      4
     $logic_not                      6
     $mem_v2                         1
     $mux                            7
     $not                            2
     $xor                            2

8.14. Executing CHECK pass (checking for obvious problems).
Checking module $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async...
Checking module $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem...
Checking module $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011...
Checking module $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011...
Checking module $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100...
Checking module fifo_formal...
Warning: Wire fifo_formal.\rd_en is used but has no driver.
Warning: Wire fifo_formal.\wr_en is used but has no driver.
Warning: Wire fifo_formal.\rd_clk is used but has no driver.
Warning: Wire fifo_formal.\wr_clk is used but has no driver.
Found and reported 4 problems.

9. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `fifo_formal'. Setting top module to fifo_formal.

9.1. Analyzing design hierarchy..
Top module:  \fifo_formal
Used module:     $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async
Used module:         $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem
Used module:         $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100
Used module:         $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011
Used module:         $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011

9.2. Analyzing design hierarchy..
Top module:  \fifo_formal
Used module:     $paramod$298d5a308775efaf8378187d61da520bff8a50d4\fifo_async
Used module:         $paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem
Used module:         $paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100
Used module:         $paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011
Used module:         $paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011
Removed 0 unused modules.
Module fifo_formal directly or indirectly contains formal properties -> setting "keep" attribute.

10. Executing jny backend.

11. Executing RTLIL backend.
Output filename: ../model/design.il

Warnings: 4 unique messages, 8 total
End of script. Logfile hash: e3376d15c3, CPU: user 0.07s system 0.01s, MEM: 18.84 MB peak
Yosys 0.55+36 (git sha1 9ab194679, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3)
Time spent: 30% 6x opt_expr (0 sec), 17% 4x opt_merge (0 sec), ...
