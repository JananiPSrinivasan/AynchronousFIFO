/* Generated by Yosys 0.55+36 (git sha1 9ab194679, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

(* dynports =  1  *)
(* hdlname = "fifo_mem" *)
(* src = "memory/fifo_mem.sv:3.1-30.10" *)
module \$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem (wr_clk, wr_en, wr_addr, wr_data, rd_clk, rd_addr, rd_data);
  wire [7:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  reg [7:0] \mem[0] ;
  reg [7:0] \mem[1] ;
  reg [7:0] \mem[2] ;
  reg [7:0] \mem[3] ;
  reg [7:0] \mem[4] ;
  reg [7:0] \mem[5] ;
  reg [7:0] \mem[6] ;
  reg [7:0] \mem[7] ;
  (* src = "memory/fifo_mem.sv:13.33-13.40" *)
  input [2:0] rd_addr;
  wire [2:0] rd_addr;
  (* src = "memory/fifo_mem.sv:12.17-12.23" *)
  input rd_clk;
  wire rd_clk;
  (* src = "memory/fifo_mem.sv:14.34-14.41" *)
  output [7:0] rd_data;
  reg [7:0] rd_data;
  (* src = "memory/fifo_mem.sv:9.33-9.40" *)
  input [2:0] wr_addr;
  wire [2:0] wr_addr;
  (* src = "memory/fifo_mem.sv:7.17-7.23" *)
  input wr_clk;
  wire wr_clk;
  (* src = "memory/fifo_mem.sv:10.33-10.40" *)
  input [7:0] wr_data;
  wire [7:0] wr_data;
  (* src = "memory/fifo_mem.sv:8.17-8.22" *)
  input wr_en;
  wire wr_en;
  assign _061_ = rd_addr[0] ? \mem[1] [0] : \mem[0] [0];
  assign _062_ = rd_addr[0] ? \mem[3] [0] : \mem[2] [0];
  assign _063_ = rd_addr[1] ? _062_ : _061_;
  assign _064_ = rd_addr[0] ? \mem[5] [0] : \mem[4] [0];
  assign _065_ = rd_addr[0] ? \mem[7] [0] : \mem[6] [0];
  assign _066_ = rd_addr[1] ? _065_ : _064_;
  assign _000_[0] = rd_addr[2] ? _066_ : _063_;
  assign _067_ = rd_addr[0] ? \mem[1] [1] : \mem[0] [1];
  assign _068_ = rd_addr[0] ? \mem[3] [1] : \mem[2] [1];
  assign _069_ = rd_addr[1] ? _068_ : _067_;
  assign _009_ = rd_addr[0] ? \mem[5] [1] : \mem[4] [1];
  assign _010_ = rd_addr[0] ? \mem[7] [1] : \mem[6] [1];
  assign _011_ = rd_addr[1] ? _010_ : _009_;
  assign _000_[1] = rd_addr[2] ? _011_ : _069_;
  assign _012_ = rd_addr[0] ? \mem[1] [2] : \mem[0] [2];
  assign _013_ = rd_addr[0] ? \mem[3] [2] : \mem[2] [2];
  assign _014_ = rd_addr[1] ? _013_ : _012_;
  assign _015_ = rd_addr[0] ? \mem[5] [2] : \mem[4] [2];
  assign _016_ = rd_addr[0] ? \mem[7] [2] : \mem[6] [2];
  assign _017_ = rd_addr[1] ? _016_ : _015_;
  assign _000_[2] = rd_addr[2] ? _017_ : _014_;
  assign _018_ = rd_addr[0] ? \mem[1] [3] : \mem[0] [3];
  assign _019_ = rd_addr[0] ? \mem[3] [3] : \mem[2] [3];
  assign _020_ = rd_addr[1] ? _019_ : _018_;
  assign _021_ = rd_addr[0] ? \mem[5] [3] : \mem[4] [3];
  assign _022_ = rd_addr[0] ? \mem[7] [3] : \mem[6] [3];
  assign _023_ = rd_addr[1] ? _022_ : _021_;
  assign _000_[3] = rd_addr[2] ? _023_ : _020_;
  assign _024_ = rd_addr[0] ? \mem[1] [4] : \mem[0] [4];
  assign _025_ = rd_addr[0] ? \mem[3] [4] : \mem[2] [4];
  assign _026_ = rd_addr[1] ? _025_ : _024_;
  assign _027_ = rd_addr[0] ? \mem[5] [4] : \mem[4] [4];
  assign _028_ = rd_addr[0] ? \mem[7] [4] : \mem[6] [4];
  assign _029_ = rd_addr[1] ? _028_ : _027_;
  assign _000_[4] = rd_addr[2] ? _029_ : _026_;
  assign _030_ = rd_addr[0] ? \mem[1] [5] : \mem[0] [5];
  assign _031_ = rd_addr[0] ? \mem[3] [5] : \mem[2] [5];
  assign _032_ = rd_addr[1] ? _031_ : _030_;
  assign _033_ = rd_addr[0] ? \mem[5] [5] : \mem[4] [5];
  assign _034_ = rd_addr[0] ? \mem[7] [5] : \mem[6] [5];
  assign _035_ = rd_addr[1] ? _034_ : _033_;
  assign _000_[5] = rd_addr[2] ? _035_ : _032_;
  assign _036_ = rd_addr[0] ? \mem[1] [6] : \mem[0] [6];
  assign _037_ = rd_addr[0] ? \mem[3] [6] : \mem[2] [6];
  assign _038_ = rd_addr[1] ? _037_ : _036_;
  assign _039_ = rd_addr[0] ? \mem[5] [6] : \mem[4] [6];
  assign _040_ = rd_addr[0] ? \mem[7] [6] : \mem[6] [6];
  assign _041_ = rd_addr[1] ? _040_ : _039_;
  assign _000_[6] = rd_addr[2] ? _041_ : _038_;
  assign _042_ = rd_addr[0] ? \mem[1] [7] : \mem[0] [7];
  assign _043_ = rd_addr[0] ? \mem[3] [7] : \mem[2] [7];
  assign _044_ = rd_addr[1] ? _043_ : _042_;
  assign _045_ = rd_addr[0] ? \mem[5] [7] : \mem[4] [7];
  assign _046_ = rd_addr[0] ? \mem[7] [7] : \mem[6] [7];
  assign _047_ = rd_addr[1] ? _046_ : _045_;
  assign _000_[7] = rd_addr[2] ? _047_ : _044_;
  assign _048_ = ~wr_addr[0];
  assign _049_ = wr_addr[2] | wr_addr[1];
  assign _050_ = _049_ | _048_;
  assign _002_ = wr_en & ~(_050_);
  assign _051_ = wr_addr[2] | ~(wr_addr[1]);
  assign _052_ = _051_ | wr_addr[0];
  assign _003_ = wr_en & ~(_052_);
  assign _053_ = _049_ | wr_addr[0];
  assign _001_ = wr_en & ~(_053_);
  assign _054_ = _051_ | _048_;
  assign _004_ = wr_en & ~(_054_);
  assign _055_ = wr_addr[1] | ~(wr_addr[2]);
  assign _056_ = _055_ | wr_addr[0];
  assign _005_ = wr_en & ~(_056_);
  assign _057_ = _055_ | _048_;
  assign _006_ = wr_en & ~(_057_);
  assign _058_ = ~(wr_addr[2] & wr_addr[1]);
  assign _059_ = _058_ | wr_addr[0];
  assign _007_ = wr_en & ~(_059_);
  assign _060_ = _058_ | _048_;
  assign _008_ = wr_en & ~(_060_);
  always @(posedge rd_clk)
    rd_data[0] <= _000_[0];
  always @(posedge rd_clk)
    rd_data[1] <= _000_[1];
  always @(posedge rd_clk)
    rd_data[2] <= _000_[2];
  always @(posedge rd_clk)
    rd_data[3] <= _000_[3];
  always @(posedge rd_clk)
    rd_data[4] <= _000_[4];
  always @(posedge rd_clk)
    rd_data[5] <= _000_[5];
  always @(posedge rd_clk)
    rd_data[6] <= _000_[6];
  always @(posedge rd_clk)
    rd_data[7] <= _000_[7];
  always @(posedge wr_clk)
    if (_007_) \mem[6] [0] <= wr_data[0];
  always @(posedge wr_clk)
    if (_007_) \mem[6] [1] <= wr_data[1];
  always @(posedge wr_clk)
    if (_007_) \mem[6] [2] <= wr_data[2];
  always @(posedge wr_clk)
    if (_007_) \mem[6] [3] <= wr_data[3];
  always @(posedge wr_clk)
    if (_007_) \mem[6] [4] <= wr_data[4];
  always @(posedge wr_clk)
    if (_007_) \mem[6] [5] <= wr_data[5];
  always @(posedge wr_clk)
    if (_007_) \mem[6] [6] <= wr_data[6];
  always @(posedge wr_clk)
    if (_007_) \mem[6] [7] <= wr_data[7];
  always @(posedge wr_clk)
    if (_001_) \mem[0] [0] <= wr_data[0];
  always @(posedge wr_clk)
    if (_001_) \mem[0] [1] <= wr_data[1];
  always @(posedge wr_clk)
    if (_001_) \mem[0] [2] <= wr_data[2];
  always @(posedge wr_clk)
    if (_001_) \mem[0] [3] <= wr_data[3];
  always @(posedge wr_clk)
    if (_001_) \mem[0] [4] <= wr_data[4];
  always @(posedge wr_clk)
    if (_001_) \mem[0] [5] <= wr_data[5];
  always @(posedge wr_clk)
    if (_001_) \mem[0] [6] <= wr_data[6];
  always @(posedge wr_clk)
    if (_001_) \mem[0] [7] <= wr_data[7];
  always @(posedge wr_clk)
    if (_005_) \mem[4] [0] <= wr_data[0];
  always @(posedge wr_clk)
    if (_005_) \mem[4] [1] <= wr_data[1];
  always @(posedge wr_clk)
    if (_005_) \mem[4] [2] <= wr_data[2];
  always @(posedge wr_clk)
    if (_005_) \mem[4] [3] <= wr_data[3];
  always @(posedge wr_clk)
    if (_005_) \mem[4] [4] <= wr_data[4];
  always @(posedge wr_clk)
    if (_005_) \mem[4] [5] <= wr_data[5];
  always @(posedge wr_clk)
    if (_005_) \mem[4] [6] <= wr_data[6];
  always @(posedge wr_clk)
    if (_005_) \mem[4] [7] <= wr_data[7];
  always @(posedge wr_clk)
    if (_003_) \mem[2] [0] <= wr_data[0];
  always @(posedge wr_clk)
    if (_003_) \mem[2] [1] <= wr_data[1];
  always @(posedge wr_clk)
    if (_003_) \mem[2] [2] <= wr_data[2];
  always @(posedge wr_clk)
    if (_003_) \mem[2] [3] <= wr_data[3];
  always @(posedge wr_clk)
    if (_003_) \mem[2] [4] <= wr_data[4];
  always @(posedge wr_clk)
    if (_003_) \mem[2] [5] <= wr_data[5];
  always @(posedge wr_clk)
    if (_003_) \mem[2] [6] <= wr_data[6];
  always @(posedge wr_clk)
    if (_003_) \mem[2] [7] <= wr_data[7];
  always @(posedge wr_clk)
    if (_004_) \mem[3] [0] <= wr_data[0];
  always @(posedge wr_clk)
    if (_004_) \mem[3] [1] <= wr_data[1];
  always @(posedge wr_clk)
    if (_004_) \mem[3] [2] <= wr_data[2];
  always @(posedge wr_clk)
    if (_004_) \mem[3] [3] <= wr_data[3];
  always @(posedge wr_clk)
    if (_004_) \mem[3] [4] <= wr_data[4];
  always @(posedge wr_clk)
    if (_004_) \mem[3] [5] <= wr_data[5];
  always @(posedge wr_clk)
    if (_004_) \mem[3] [6] <= wr_data[6];
  always @(posedge wr_clk)
    if (_004_) \mem[3] [7] <= wr_data[7];
  always @(posedge wr_clk)
    if (_002_) \mem[1] [0] <= wr_data[0];
  always @(posedge wr_clk)
    if (_002_) \mem[1] [1] <= wr_data[1];
  always @(posedge wr_clk)
    if (_002_) \mem[1] [2] <= wr_data[2];
  always @(posedge wr_clk)
    if (_002_) \mem[1] [3] <= wr_data[3];
  always @(posedge wr_clk)
    if (_002_) \mem[1] [4] <= wr_data[4];
  always @(posedge wr_clk)
    if (_002_) \mem[1] [5] <= wr_data[5];
  always @(posedge wr_clk)
    if (_002_) \mem[1] [6] <= wr_data[6];
  always @(posedge wr_clk)
    if (_002_) \mem[1] [7] <= wr_data[7];
  always @(posedge wr_clk)
    if (_006_) \mem[5] [0] <= wr_data[0];
  always @(posedge wr_clk)
    if (_006_) \mem[5] [1] <= wr_data[1];
  always @(posedge wr_clk)
    if (_006_) \mem[5] [2] <= wr_data[2];
  always @(posedge wr_clk)
    if (_006_) \mem[5] [3] <= wr_data[3];
  always @(posedge wr_clk)
    if (_006_) \mem[5] [4] <= wr_data[4];
  always @(posedge wr_clk)
    if (_006_) \mem[5] [5] <= wr_data[5];
  always @(posedge wr_clk)
    if (_006_) \mem[5] [6] <= wr_data[6];
  always @(posedge wr_clk)
    if (_006_) \mem[5] [7] <= wr_data[7];
  always @(posedge wr_clk)
    if (_008_) \mem[7] [0] <= wr_data[0];
  always @(posedge wr_clk)
    if (_008_) \mem[7] [1] <= wr_data[1];
  always @(posedge wr_clk)
    if (_008_) \mem[7] [2] <= wr_data[2];
  always @(posedge wr_clk)
    if (_008_) \mem[7] [3] <= wr_data[3];
  always @(posedge wr_clk)
    if (_008_) \mem[7] [4] <= wr_data[4];
  always @(posedge wr_clk)
    if (_008_) \mem[7] [5] <= wr_data[5];
  always @(posedge wr_clk)
    if (_008_) \mem[7] [6] <= wr_data[6];
  always @(posedge wr_clk)
    if (_008_) \mem[7] [7] <= wr_data[7];
endmodule

(* dynports =  1  *)
(* hdlname = "fifo_read_ctrl" *)
(* src = "rtl/fifo_read_ctrl.sv:11.1-63.10" *)
module \$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011 (clk, rst_n, rd_en, wr_gr_ptr_sync, empty, rd_gray_ptr, rd_addr);
  (* src = "rtl/fifo_read_ctrl.sv:32.14-32.29" *)
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  (* force_downto = 32'd1 *)
  (* src = "rtl/fifo_read_ctrl.sv:33.23-33.35|/usr/local/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [3:0] _09_;
  (* force_downto = 32'd1 *)
  (* src = "rtl/fifo_read_ctrl.sv:33.23-33.35|/usr/local/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [3:0] _10_;
  (* src = "rtl/fifo_read_ctrl.sv:12.17-12.20" *)
  input clk;
  wire clk;
  (* src = "rtl/fifo_read_ctrl.sv:17.18-17.23" *)
  output empty;
  wire empty;
  (* src = "rtl/fifo_read_ctrl.sv:19.35-19.42" *)
  output [2:0] rd_addr;
  wire [2:0] rd_addr;
  (* src = "rtl/fifo_read_ctrl.sv:23.22-23.32" *)
  reg [3:0] rd_bin_ptr;
  (* src = "rtl/fifo_read_ctrl.sv:14.17-14.22" *)
  input rd_en;
  wire rd_en;
  (* src = "rtl/fifo_read_ctrl.sv:18.32-18.43" *)
  output [3:0] rd_gray_ptr;
  wire [3:0] rd_gray_ptr;
  (* src = "rtl/fifo_read_ctrl.sv:13.17-13.22" *)
  input rst_n;
  wire rst_n;
  (* src = "rtl/fifo_read_ctrl.sv:15.32-15.46" *)
  input [3:0] wr_gr_ptr_sync;
  wire [3:0] wr_gr_ptr_sync;
  assign rd_gray_ptr[0] = rd_bin_ptr[1] ^ rd_bin_ptr[0];
  assign _01_ = ~(rd_gray_ptr[0] ^ wr_gr_ptr_sync[0]);
  assign rd_gray_ptr[1] = rd_bin_ptr[2] ^ rd_bin_ptr[1];
  assign _02_ = rd_gray_ptr[1] ^ wr_gr_ptr_sync[1];
  assign _03_ = _01_ & ~(_02_);
  assign rd_gray_ptr[2] = rd_bin_ptr[3] ^ rd_bin_ptr[2];
  assign _04_ = rd_gray_ptr[2] ^ wr_gr_ptr_sync[2];
  assign _05_ = wr_gr_ptr_sync[3] ^ rd_bin_ptr[3];
  assign _06_ = _05_ | _04_;
  assign empty = _03_ & ~(_06_);
  assign _00_ = rd_en & ~(empty);
  assign _09_[0] = ~rd_bin_ptr[0];
  assign _07_ = ~(rd_bin_ptr[1] & rd_bin_ptr[0]);
  assign _10_[2] = ~(_07_ ^ rd_bin_ptr[2]);
  assign _08_ = rd_bin_ptr[2] & ~(_07_);
  assign _10_[3] = _08_ ^ rd_bin_ptr[3];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/fifo_read_ctrl.sv:28.1-35.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) rd_bin_ptr[0] <= 1'h0;
    else if (_00_) rd_bin_ptr[0] <= _09_[0];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/fifo_read_ctrl.sv:28.1-35.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) rd_bin_ptr[1] <= 1'h0;
    else if (_00_) rd_bin_ptr[1] <= rd_gray_ptr[0];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/fifo_read_ctrl.sv:28.1-35.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) rd_bin_ptr[2] <= 1'h0;
    else if (_00_) rd_bin_ptr[2] <= _10_[2];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/fifo_read_ctrl.sv:28.1-35.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) rd_bin_ptr[3] <= 1'h0;
    else if (_00_) rd_bin_ptr[3] <= _10_[3];
  assign _09_[3:1] = rd_bin_ptr[3:1];
  assign _10_[1:0] = { rd_gray_ptr[0], _09_[0] };
  assign rd_addr = rd_bin_ptr[2:0];
  assign rd_gray_ptr[3] = rd_bin_ptr[3];
endmodule

(* dynports =  1  *)
(* hdlname = "fifo_write_ctrl" *)
(* src = "rtl/fifo_write_ctrl.sv:12.1-75.10" *)
module \$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011 (clk, rst_n, wr_en, rd_ptr_sync, full, wr_gray_ptr, wr_addr);
  (* src = "rtl/fifo_write_ctrl.sv:32.14-32.28" *)
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  (* force_downto = 32'd1 *)
  (* src = "rtl/fifo_write_ctrl.sv:33.23-33.35|/usr/local/bin/../share/yosys/techmap.v:270.23-270.24" *)
  wire [3:0] _09_;
  (* force_downto = 32'd1 *)
  (* src = "rtl/fifo_write_ctrl.sv:33.23-33.35|/usr/local/bin/../share/yosys/techmap.v:270.26-270.27" *)
  wire [3:0] _10_;
  (* src = "rtl/fifo_write_ctrl.sv:13.17-13.20" *)
  input clk;
  wire clk;
  (* src = "rtl/fifo_write_ctrl.sv:18.18-18.22" *)
  output full;
  wire full;
  (* src = "rtl/fifo_write_ctrl.sv:16.32-16.43" *)
  input [3:0] rd_ptr_sync;
  wire [3:0] rd_ptr_sync;
  (* src = "rtl/fifo_write_ctrl.sv:14.17-14.22" *)
  input rst_n;
  wire rst_n;
  (* src = "rtl/fifo_write_ctrl.sv:20.35-20.42" *)
  output [2:0] wr_addr;
  wire [2:0] wr_addr;
  (* src = "rtl/fifo_write_ctrl.sv:23.22-23.32" *)
  reg [3:0] wr_bin_ptr;
  (* src = "rtl/fifo_write_ctrl.sv:15.17-15.22" *)
  input wr_en;
  wire wr_en;
  (* src = "rtl/fifo_write_ctrl.sv:19.33-19.44" *)
  output [3:0] wr_gray_ptr;
  wire [3:0] wr_gray_ptr;
  assign wr_gray_ptr[0] = wr_bin_ptr[1] ^ wr_bin_ptr[0];
  assign _01_ = ~(wr_gray_ptr[0] ^ rd_ptr_sync[0]);
  assign wr_gray_ptr[1] = wr_bin_ptr[2] ^ wr_bin_ptr[1];
  assign _02_ = wr_gray_ptr[1] ^ rd_ptr_sync[1];
  assign _03_ = _01_ & ~(_02_);
  assign wr_gray_ptr[2] = wr_bin_ptr[3] ^ wr_bin_ptr[2];
  assign _04_ = ~(wr_gray_ptr[2] ^ rd_ptr_sync[2]);
  assign _05_ = ~(wr_bin_ptr[3] ^ rd_ptr_sync[3]);
  assign _06_ = _05_ | _04_;
  assign full = _03_ & ~(_06_);
  assign _00_ = wr_en & ~(full);
  assign _09_[0] = ~wr_bin_ptr[0];
  assign _07_ = ~(wr_bin_ptr[1] & wr_bin_ptr[0]);
  assign _10_[2] = ~(_07_ ^ wr_bin_ptr[2]);
  assign _08_ = wr_bin_ptr[2] & ~(_07_);
  assign _10_[3] = _08_ ^ wr_bin_ptr[3];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/fifo_write_ctrl.sv:28.1-36.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) wr_bin_ptr[0] <= 1'h0;
    else if (_00_) wr_bin_ptr[0] <= _09_[0];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/fifo_write_ctrl.sv:28.1-36.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) wr_bin_ptr[1] <= 1'h0;
    else if (_00_) wr_bin_ptr[1] <= wr_gray_ptr[0];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/fifo_write_ctrl.sv:28.1-36.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) wr_bin_ptr[2] <= 1'h0;
    else if (_00_) wr_bin_ptr[2] <= _10_[2];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/fifo_write_ctrl.sv:28.1-36.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) wr_bin_ptr[3] <= 1'h0;
    else if (_00_) wr_bin_ptr[3] <= _10_[3];
  assign _09_[3:1] = wr_bin_ptr[3:1];
  assign _10_[1:0] = { wr_gray_ptr[0], _09_[0] };
  assign wr_addr = wr_bin_ptr[2:0];
  assign wr_gray_ptr[3] = wr_bin_ptr[3];
endmodule

(* dynports =  1  *)
(* hdlname = "sync_gray" *)
(* src = "rtl/sync_gray.sv:1.1-21.10" *)
module \$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100 (clk, rst_n, d, q);
  (* src = "rtl/sync_gray.sv:2.17-2.20" *)
  input clk;
  wire clk;
  (* src = "rtl/sync_gray.sv:4.28-4.29" *)
  input [3:0] d;
  wire [3:0] d;
  (* src = "rtl/sync_gray.sv:5.29-5.30" *)
  output [3:0] q;
  reg [3:0] q;
  (* src = "rtl/sync_gray.sv:3.17-3.22" *)
  input rst_n;
  wire rst_n;
  (* src = "rtl/sync_gray.sv:8.19-8.25" *)
  reg [3:0] stage1;
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/sync_gray.sv:10.1-19.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) q[0] <= 1'h0;
    else q[0] <= stage1[0];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/sync_gray.sv:10.1-19.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) q[1] <= 1'h0;
    else q[1] <= stage1[1];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/sync_gray.sv:10.1-19.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) q[2] <= 1'h0;
    else q[2] <= stage1[2];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/sync_gray.sv:10.1-19.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) q[3] <= 1'h0;
    else q[3] <= stage1[3];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/sync_gray.sv:10.1-19.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) stage1[0] <= 1'h0;
    else stage1[0] <= d[0];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/sync_gray.sv:10.1-19.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) stage1[1] <= 1'h0;
    else stage1[1] <= d[1];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/sync_gray.sv:10.1-19.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) stage1[2] <= 1'h0;
    else stage1[2] <= d[2];
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/sync_gray.sv:10.1-19.4" *)
  always @(posedge clk, negedge rst_n)
    if (!rst_n) stage1[3] <= 1'h0;
    else stage1[3] <= d[3];
endmodule

(* dynports =  1  *)
(* top =  1  *)
(* src = "rtl/fifo_async.sv:3.1-78.10" *)
module fifo_async(wr_clk, rd_clk, wr_rst_n, rd_rst_n, rd_en, wr_en, wr_data, rd_data, full, empty);
  (* src = "rtl/fifo_async.sv:53.28-53.41" *)
  wire _0_;
  (* src = "rtl/fifo_async.sv:19.38-19.43" *)
  output empty;
  wire empty;
  (* src = "rtl/fifo_async.sv:18.38-18.42" *)
  output full;
  wire full;
  (* src = "rtl/fifo_async.sv:23.36-23.43" *)
  wire [2:0] rd_addr;
  (* src = "rtl/fifo_async.sv:7.37-7.43" *)
  input rd_clk;
  wire rd_clk;
  (* src = "rtl/fifo_async.sv:16.55-16.62" *)
  output [7:0] rd_data;
  wire [7:0] rd_data;
  (* src = "rtl/fifo_async.sv:12.37-12.42" *)
  input rd_en;
  wire rd_en;
  (* src = "rtl/fifo_async.sv:25.52-25.69" *)
  wire [3:0] rd_gr_ptr_sync_wr;
  (* src = "rtl/fifo_async.sv:24.47-24.58" *)
  wire [3:0] rd_gray_ptr;
  (* src = "rtl/fifo_async.sv:10.37-10.45" *)
  input rd_rst_n;
  wire rd_rst_n;
  (* src = "rtl/fifo_async.sv:23.45-23.52" *)
  wire [2:0] wr_addr;
  (* src = "rtl/fifo_async.sv:6.37-6.43" *)
  input wr_clk;
  wire wr_clk;
  (* src = "rtl/fifo_async.sv:15.53-15.60" *)
  input [7:0] wr_data;
  wire [7:0] wr_data;
  (* src = "rtl/fifo_async.sv:13.37-13.42" *)
  input wr_en;
  wire wr_en;
  (* src = "rtl/fifo_async.sv:25.34-25.51" *)
  wire [3:0] wr_gr_ptr_sync_rd;
  (* src = "rtl/fifo_async.sv:24.34-24.45" *)
  wire [3:0] wr_gray_ptr;
  (* src = "rtl/fifo_async.sv:9.37-9.45" *)
  input wr_rst_n;
  wire wr_rst_n;
  assign _0_ = wr_en & ~(full);
  (* src = "rtl/fifo_async.sv:51.74-59.14" *)
  \$paramod$c9b7e9f62618a82a135111476fe7fc90dbcdb2d0\fifo_mem  mem (
    .rd_addr(rd_addr),
    .rd_clk(rd_clk),
    .rd_data(rd_data),
    .wr_addr(wr_addr),
    .wr_clk(wr_clk),
    .wr_data(wr_data),
    .wr_en(_0_)
  );
  (* src = "rtl/fifo_async.sv:70.47-77.14" *)
  \$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100  rd_to_wr (
    .clk(wr_clk),
    .d(rd_gray_ptr),
    .q(rd_gr_ptr_sync_wr),
    .rst_n(wr_rst_n)
  );
  (* src = "rtl/fifo_async.sv:39.55-47.7" *)
  \$paramod\fifo_read_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011  read_ctrl (
    .clk(rd_clk),
    .empty(empty),
    .rd_addr(rd_addr),
    .rd_en(rd_en),
    .rd_gray_ptr(rd_gray_ptr),
    .rst_n(rd_rst_n),
    .wr_gr_ptr_sync(wr_gr_ptr_sync_rd)
  );
  (* src = "rtl/fifo_async.sv:62.47-68.14" *)
  \$paramod\sync_gray\WIDTH=s32'00000000000000000000000000000100  wr_to_rd (
    .clk(rd_clk),
    .d(wr_gray_ptr),
    .q(wr_gr_ptr_sync_rd),
    .rst_n(rd_rst_n)
  );
  (* src = "rtl/fifo_async.sv:28.56-36.14" *)
  \$paramod\fifo_write_ctrl\ADDR_WIDTH=s32'00000000000000000000000000000011  write_ctrl (
    .clk(wr_clk),
    .full(full),
    .rd_ptr_sync(rd_gr_ptr_sync_wr),
    .rst_n(wr_rst_n),
    .wr_addr(wr_addr),
    .wr_en(wr_en),
    .wr_gray_ptr(wr_gray_ptr)
  );
endmodule
